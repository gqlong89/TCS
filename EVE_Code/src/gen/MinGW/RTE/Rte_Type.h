/** @file     Rte_Type.h
  * 
  * @brief    RTE type definitions
  * 
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  * 
  * @note     Generated by ETAS GmbH  RTA-RTE v5.8.4  (R4.0 backend version: v7.8.7 (Build 46772))
  */

#ifndef RTE_TYPE_H
#define RTE_TYPE_H

#include "Rte.h"
#include "Rte_Cfg.h"

/*******************************************************
 ***
 *** Forward Declarations
 ***
 *******************************************************/

struct Rte_CDS_Algo;
struct Rte_CDS_BEA;
struct Rte_CDS_EEA;
struct Rte_CDS_EcuAbstraction;
struct Rte_CDS_SensorSWComponent;

/*******************************************************
 ***
 *** Types
 ***
 *******************************************************/

/* Information: No typedef for ImplementationDataType boolean because the SwBaseType.nativeDeclaration is empty. */

/* Information: No typedef for ImplementationDataType float32 because the SwBaseType.nativeDeclaration is empty. */

/* Information: No typedef for ImplementationDataType float64 because the SwBaseType.nativeDeclaration is empty. */

/* Information: No typedef for ImplementationDataType sint16 because the SwBaseType.nativeDeclaration is empty. */

/* Information: No typedef for ImplementationDataType sint32 because the SwBaseType.nativeDeclaration is empty. */

/* Information: No typedef for ImplementationDataType sint8 because the SwBaseType.nativeDeclaration is empty. */

/* Information: No typedef for ImplementationDataType uint32 because the SwBaseType.nativeDeclaration is empty. */

typedef unsigned char uint8;

typedef uint8 I_uint8_0_100;

typedef uint8 I_uint8_0_180;

typedef uint8 I_uint8_0_50;

typedef uint8 I_uint8_97_254;

typedef boolean SIGNAL_QUALIFIER;

typedef uint8 SPEED_WIPING;

typedef boolean STATE_EMERGENCY_BUTTON;

typedef boolean STATE_IGNITION_SWITCH;

typedef boolean STATE_LIGHT;

typedef uint8 STATE_LIGHT_WIP_SWITCH;

typedef uint8 STATE_WIPING;

typedef boolean WIPER_POSITION;

typedef uint8 WP_SPEED;

typedef uint8 WP_WIP;

typedef uint8 WP_WIPER_STATE;

typedef boolean WP_WIP_AUTO;

typedef boolean WP_WIP_MAN;

typedef P2FUNC(VAR(Std_ReturnType, AUTOMATIC), RTE_CODE, Rte_CallFP_Algo_IN_CS_IF_BrakeValue_ClientServerOperation_Brake) (VAR(float64, AUTOMATIC) DLBrakeValue, VAR(float64, AUTOMATIC) DRBrakeValue, VAR(float64, AUTOMATIC) ULBrakeValue, VAR(float64, AUTOMATIC) URBrakeValue);

typedef P2FUNC(VAR(Std_ReturnType, AUTOMATIC), RTE_CODE, Rte_CallFP_BEA_IN_CS_IF_BrakeValue_ClientServerOperation_Brake) (VAR(float64, AUTOMATIC) DLBrakeValue, VAR(float64, AUTOMATIC) DRBrakeValue, VAR(float64, AUTOMATIC) ULBrakeValue, VAR(float64, AUTOMATIC) URBrakeValue);

typedef P2FUNC(VAR(Std_ReturnType, AUTOMATIC), RTE_CODE, Rte_CallFP_EEA_IN_CS_IF_Throttle_ClientServerOperation_Throttle) (VAR(float64, AUTOMATIC) Throttle);

typedef P2FUNC(VAR(Std_ReturnType, AUTOMATIC), RTE_CODE, Rte_CallFP_SensorSWComponent_IN_CS_IF_Sensor_ClientServerOperation_Sensor) (VAR(float64, AUTOMATIC) DLWheelSpeed, VAR(float64, AUTOMATIC) DRWheelSpeed, VAR(float64, AUTOMATIC) ULWheelSpeed, VAR(float64, AUTOMATIC) URWheelSpeed, VAR(float64, AUTOMATIC) Gyro, VAR(float64, AUTOMATIC) CarSpeed, VAR(float64, AUTOMATIC) SteeringAngle);

typedef P2FUNC(VAR(Std_ReturnType, AUTOMATIC), RTE_CODE, Rte_CallFP_SensorSWComponent_OUT_CS_IF_Sensor_ClientServerOperation_Sensor) (CONSTP2VAR(float64, AUTOMATIC, RTE_APPL_DATA) DLWheelSpeed, CONSTP2VAR(float64, AUTOMATIC, RTE_APPL_DATA) DRWheelSpeed, CONSTP2VAR(float64, AUTOMATIC, RTE_APPL_DATA) ULWheelSpeed, CONSTP2VAR(float64, AUTOMATIC, RTE_APPL_DATA) URWheelSpeed, CONSTP2VAR(float64, AUTOMATIC, RTE_APPL_DATA) CarSpeed, CONSTP2VAR(float64, AUTOMATIC, RTE_APPL_DATA) SteeringAngle, CONSTP2VAR(float64, AUTOMATIC, RTE_APPL_DATA) Gyro);

typedef P2FUNC(VAR(Std_ReturnType, AUTOMATIC), RTE_CODE, Rte_ReadFP_EEA_SR_IF_Throttle_Throttle) (CONSTP2VAR(float64, AUTOMATIC, RTE_APPL_DATA) data);

typedef CONSTP2CONST(struct Rte_CDS_Algo,AUTOMATIC,RTE_CONST) Rte_SelfType_Algo;

typedef CONSTP2CONST(struct Rte_CDS_BEA,AUTOMATIC,RTE_CONST) Rte_SelfType_BEA;

typedef CONSTP2CONST(struct Rte_CDS_EEA,AUTOMATIC,RTE_CONST) Rte_SelfType_EEA;

typedef CONSTP2CONST(struct Rte_CDS_EcuAbstraction,AUTOMATIC,RTE_CONST) Rte_SelfType_EcuAbstraction;

typedef CONSTP2CONST(struct Rte_CDS_SensorSWComponent,AUTOMATIC,RTE_CONST) Rte_SelfType_SensorSWComponent;

typedef P2FUNC(VAR(Std_ReturnType, AUTOMATIC), RTE_CODE, Rte_WriteFP_Algo_SR_IF_Throttle_Throttle) (VAR(float64, AUTOMATIC) data);

#endif /* !RTE_TYPE_H */
